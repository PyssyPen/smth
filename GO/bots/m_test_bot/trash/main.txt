
/*
var (
	recording   bool
	fileIndex   int
	currentFile *os.File
	mu          sync.Mutex
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token, err := key.ReadKey("/home/pyssy/VSC/GO/m_test_bot/key/key.txt")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
	settings := tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
	bot, err := tele.NewBot(settings)
	if err != nil {
		log.Fatal(err)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	bot.Handle("/start", func(c tele.Context) error {
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
		return c.Send("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç üöÄ\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", createMainMenu())
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
	bot.Handle("/help", func(c tele.Context) error {
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
		helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/hello - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/buttons - –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫
/clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞`
		return c.Send(helpText, createMainMenu())
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hello
	bot.Handle("/hello", func(c tele.Context) error {
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /hello")
		return c.Send("–ü—Ä–∏–≤–µ—Ç, "+c.Sender().FirstName+"! üëã", createMainMenu())
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
	bot.Handle("/about", func(c tele.Context) error {
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /about")
		return c.Send("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot.v4", createMainMenu())
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_history
	bot.Handle("/clear_history", func(c tele.Context) error {
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /clear_history")
		mu.Lock()
		defer mu.Unlock()

		if currentFile != nil {
			currentFile.Close()
			currentFile = nil
		}

		// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
		fileName := fmt.Sprintf("%d.txt", fileIndex)
		err := os.Remove(fileName)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.")
		}

		return c.Send("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	bot.Handle(tele.OnText, func(c tele.Context) error {
		text := c.Text()
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text)

		mu.Lock()
		if recording && currentFile != nil {
			_, err := currentFile.WriteString(text + "\n")
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:", err)
			}
		}
		mu.Unlock()

		return c.Send("–í—ã —Å–∫–∞–∑–∞–ª–∏: "+text, createMainMenu())
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
	bot.Handle(tele.OnCallback, func(c tele.Context) error {
		callback := c.Callback()
		if callback == nil {
			fmt.Println("Callback is nil")
			return c.Send("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–∞.")
		}

		callbackData := strings.TrimSpace(callback.Data)
		fmt.Println("–ü–æ–ª—É—á–µ–Ω callback:", callbackData)

		switch callbackData {
		case "btn_1":
			return c.Send("–í—ã –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 1!")
		case "btn_2":
			return c.Send("–í—ã –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 2!")
		case "hide":
			return c.Send("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", &tele.ReplyMarkup{RemoveKeyboard: true})
		case "show":
			return c.Send("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞!", createMainMenu())
		case "start_record":
			mu.Lock()
			if !recording {
				fileIndex++
				fileName := fmt.Sprintf("%d.txt", fileIndex)
				var err error
				currentFile, err = os.Create(fileName)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
					return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏.")
				}
				recording = true
				return c.Send("–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞!")
			}
			mu.Unlock()
			return c.Send("–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç!")
		case "stop_record":
			mu.Lock()
			if recording {
				if currentFile != nil {
					currentFile.Close()
					currentFile = nil
				}
				recording = false
				return c.Send("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
			}
			mu.Unlock()
			return c.Send("–ó–∞–ø–∏—Å—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
		case "shutdown":
			mu.Lock()
			if recording && currentFile != nil {
				currentFile.Close()
				currentFile = nil
			}
			mu.Unlock()
			c.Send("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
			bot.Stop()
			return nil
		default:
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!")
		}
	})

	// –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
	bot.Handle("/buttons", func(c tele.Context) error {
		fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /buttons")
		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
		btn1 := tele.InlineButton{
			Unique: "btn_1",
			Text:   "–ö–Ω–æ–ø–∫–∞ 1",
		}
		btn2 := tele.InlineButton{
			Unique: "btn_2",
			Text:   "–ö–Ω–æ–ø–∫–∞ 2",
		}
		hideBtn := tele.InlineButton{
			Unique: "hide",
			Text:   "–°–∫—Ä—ã—Ç—å",
		}
		showBtn := tele.InlineButton{
			Unique: "show",
			Text:   "–ü–æ–∫–∞–∑–∞—Ç—å",
		}
		startRecordBtn := tele.InlineButton{
			Unique: "start_record",
			Text:   "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
		}
		stopRecordBtn := tele.InlineButton{
			Unique: "stop_record",
			Text:   "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
		}
		shutdownBtn := tele.InlineButton{
			Unique: "shutdown",
			Text:   "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞",
		}

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		menu := &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{btn1, btn2},
				{hideBtn, showBtn},
				{startRecordBtn, stopRecordBtn},
				{shutdownBtn},
			},
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		return c.Send("–ü—Ä–∏–º–µ—Ä inline-–∫–Ω–æ–ø–æ–∫:", menu)
	})

	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	bot.Start()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
func createMainMenu() *tele.ReplyMarkup {
	return &tele.ReplyMarkup{
		ResizeKeyboard: true,
		ReplyKeyboard: [][]tele.ReplyButton{
			{
				{Text: "–ü—Ä–∏–≤–µ—Ç"},
				{Text: "–û –±–æ—Ç–µ"},
			},
			{
				{Text: "–ü–æ–º–æ—â—å"},
				{Text: "–ö–Ω–æ–ø–∫–∏"},
			},
			{
				{Text: "–°–∫—Ä—ã—Ç—å"},
				{Text: "–ü–æ–∫–∞–∑–∞—Ç—å"},
			},
		},
	}
}
*/
