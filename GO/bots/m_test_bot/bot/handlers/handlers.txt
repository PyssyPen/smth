




func RegisterHandlers(bot *tele.Bot) {
	bot.Handle("/start", startHandler)
	bot.Handle("/help", helpHandler)
	//bot.Handle("/hello", helloHandler)
	//bot.Handle("/about", aboutHandler)
	//bot.Handle("/clear_history", clearHistoryHandler)
	bot.Handle(tele.OnText, messageHandler)
	bot.Handle(tele.OnCallback, callbackHandler)
	bot.Handle("/buttons", buttonsHandler)
}





// —Ç—É—Ç –≤—ã–≤–æ–¥–∏–º —Ç–æ, —á—Ç–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –≤–∏–¥–µ –∫–æ–º–∞–Ω–¥—ã (/start)
// –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start
// func buttonsHandler(c tele.Context) error {
// 	fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /buttons")
// 	return c.Send("–ü—Ä–∏–º–µ—Ä inline-–∫–Ω–æ–ø–æ–∫:", keyboard.CreateInlineKeyboard())
// }





func clearHistoryHandler(c tele.Context) error {
	fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /clear_history")
	mu.Lock()
	defer mu.Unlock()

	if currentFile != nil {
		currentFile.Close()
		currentFile = nil
	}

	err := file.DeleteHistoryFile(fileIndex)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.")
	}

	return c.Send("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
}






func helloHandler(c tele.Context) error {
 	fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /hello")
 	return c.Send("–ü—Ä–∏–≤–µ—Ç, "+c.Sender().FirstName+"! üëã", keyboard.CreateMainMenu())
}





func aboutHandler(c tele.Context) error {
	fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /about")
	return c.Send("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot.v4", keyboard.CreateMainMenu())
}






// –æ—Ç–≤–µ—á–µ–∞–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –≤—ã —Å–∫–∞–∑–∞–ª–∏ + ...
func messageHandler(c tele.Context) error {
	text := c.Text()
	fmt.Println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text)

	mu.Lock()
	if recording && currentFile != nil {
		_, err := currentFile.WriteString(text + "\n")
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:", err)
		}
	}
	mu.Unlock()

	return c.Send("–í—ã —Å–∫–∞–∑–∞–ª–∏: "+text, keyboard.CreateMainMenu())
}






// —Ç—É—Ç –≤—ã–≤–æ–¥–∏–º –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–∏–∂–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
// –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç
func messageHandler(c tele.Context) error {
	text := c.Text()
	fmt.Println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text)
	// fmt.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s –º—ã –µ–≥–æ –æ–±—Ä–∞–±—ã—Ç—ã–≤–∞–µ–º", text)
	// c.Send("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s –º—ã –µ–≥–æ –æ–±—Ä–∞–±—ã—Ç—ã–≤–∞–µ–º", text)

	//return c.Send("–ö–ù–û–ü–ö–ê –°–ù–ò–ó–£: "+text, keyboard.CreateMainMenu())
	return c.Send("–ú–µ–Ω—é:", keyboard.CreateMenu()) //"–ú–µ–Ω—é:",
}








// –£–ë–†–ê–¢–¨ // –í –ù–£–ñ–ù–´–• –ö–ù–û–ü–ö–ê–•
func helpHandler(c tele.Context) error {
	fmt.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
// /hello - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
// /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/buttons - –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫
// /clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞`
	return c.Send(helpText, keyboard.CreateMainMenu())
}







func callbackHandler(c tele.Context) error {

    switch callbackData {
    case "start_record":
		mu.Lock()
		if !recording {
			var err error
			currentFile, fileIndex, err = file.CreateHistoryFile(fileIndex)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏.")
			}
			recording = true
			return c.Send("–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞!")
		}
		mu.Unlock()
		return c.Send("–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç!")
	case "stop_record":
		mu.Lock()
		if recording {
			if currentFile != nil {
				currentFile.Close()
				currentFile = nil
			}
			recording = false
			return c.Send("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
		}
		mu.Unlock()
		return c.Send("–ó–∞–ø–∏—Å—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    case "shutdown":
     	mu.Lock()
     	if recording && currentFile != nil {
        		currentFile.Close()
        		currentFile = nil
        }
        	mu.Unlock()
        	c.Send("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
            bot.Stop()
            return nil







func CreateSausageMenu() *tele.ReplyMarkup {
	boiledSausage := tele.InlineButton{
		Unique: "boiled_sausage",
		Text:   "–í–∞—Ä–µ–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
	}

	semiSmokedSausage := tele.InlineButton{
		Unique: "semi_smoked_sausage",
		Text:   "–ü–æ–ª—É–∫–æ–ø—á—ë–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
	}

	smokedSausage := tele.InlineButton{
		Unique: "smoked_sausage",
		Text:   "–°—ã—Ä–æ–∫–æ–ø—á—ë–Ω—ã–µ –∫–æ–ª–±–∞—Å—ã",
	}

	// –°–æ–∑–¥–∞–π—Ç–µ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç—Ç–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
	return &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{boiledSausage},
			{smokedSausage},
			{semiSmokedSausage},
		},
	}
}